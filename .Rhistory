## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <<- NULL
globalm <<- NULL
# if localm does not exist yet, create localm and initialize to NULL
if (!exists("localm")) {
localm <<- NULL
}
#setter and getter functions
setlocalmat <- function(mat) localm <<- mat
getlocalmat <- function() localm
setglobalmat <- function(mat) globalm <<- mat
getglobalmat <- function() globalm
setimat <- function(imat) im <<- imat
getimat <- function() im
#the function makeCacheMatrix must take an argument
if (!missing(x)) {
#make sure an argument is passed into the makeCacheMatrix function
if (class(x) == "matrix") {
#only square matrices can be inverted
if (nrow(x) == ncol(x)) {
if (!identical(x,localm)) {
printmat <- cat("the matrix curently in the cache is ", getmat())
print (printmat)
setlocalmat(x) #assign x to m
printmat <- cat("the new matrix just stored into cache is ", getmat())
print (printmat)
} else {
printmat <- "the new matrix is identical to stored matrix"
print(printmat)
}
list(setlocalmat = setlocalmat, getlocalmat = getlocalmat, setglobalmat = setglobalmat, getglobalmat = getglobalmat, setimat = setimat, getimat = getimat)
} else {
print ("the matrix in the argument is not square")
}
} else {
print ("the argument is not of class matrix")
}
} else {
print ("no agrument was passed into the makeCacheMatrix function")
}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
m1 <- matrix(1:9,3,3)
m2 <- matrix (10:18,3,3)
m3 <- matrix(1:9,3,3)
m4 <- matrix(10:18,3,3)
rm <- matrix (1:6,3,2)
v <- 1:5
mat1 <- makeCacheMatrix()
mat1 <- makeCacheMatrix(v)
mat1 <- makeCacheMatrix(rm)
mat1 <- makeCacheMatrix(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <<- NULL
globalm <<- NULL
# if localm does not exist yet, create localm and initialize to NULL
if (!exists("localm")) {
localm <<- NULL
}
#setter and getter functions
setlocalmat <- function(mat) localm <<- mat
getlocalmat <- function() localm
setglobalmat <- function(mat) globalm <<- mat
getglobalmat <- function() globalm
setimat <- function(imat) im <<- imat
getimat <- function() im
#the function makeCacheMatrix must take an argument
if (!missing(x)) {
#make sure an argument is passed into the makeCacheMatrix function
if (class(x) == "matrix") {
#only square matrices can be inverted
if (nrow(x) == ncol(x)) {
if (!identical(x,localm)) {
printmat <- cat("the matrix curently in the cache is ", getlocalmat())
print (printmat)
setlocalmat(x) #assign x to m
printmat <- cat("the new matrix just stored into cache is ", getlocalmat())
print (printmat)
} else {
printmat <- "the new matrix is identical to stored matrix"
print(printmat)
}
list(setlocalmat = setlocalmat, getlocalmat = getlocalmat, setglobalmat = setglobalmat, getglobalmat = getglobalmat, setimat = setimat, getimat = getimat)
} else {
print ("the matrix in the argument is not square")
}
} else {
print ("the argument is not of class matrix")
}
} else {
print ("no agrument was passed into the makeCacheMatrix function")
}
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
mat1 <- makeCacheMatrix(rm)
mat1 <- makeCacheMatrix(v)
mat1 <- makeCacheMatrix(m1)
mat1 <- makeCacheMatrix(m3)
mat2 <- makeCacheMatrix(m2)
mat1$localm
mat2$localm
mat2$globalm
mat2$getlocalm
mat2$getlocalmat
mat2$localm
mat1
mat1 <- makeCacheMatrix(m1)
m1
mat1$getlocalmat()
mat2$getlocalmat()
mat1 <- makeCacheMatrix(m2)
mat1$getlocalmat()
mat2$getlocalmat()
rm(mat1)
rm(mat2)
rm(localm)
rm(globalm)
rm(im)
mat1 <- makeCacheMatrix(m1)
mat2 <- makeCacheMatrix(m2)
mat1$localm
mat1$getlocalm()
mat2$getlocalm()
mat2 <- makeCacheMatrix(m3)
mat2$getlocalm()
mat1$getlocalm()
